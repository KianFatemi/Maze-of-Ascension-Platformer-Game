//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/UIControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UIControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UIControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UIControls"",
    ""maps"": [
        {
            ""name"": ""Keyboard"",
            ""id"": ""503e2330-5cc3-4fef-a4e7-24c9e2df88f4"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""adddd404-ac9c-4299-a7b8-7eaf5877f241"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""da8d4920-22e8-4489-96c5-cf0f356f1264"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Enter"",
                    ""type"": ""Button"",
                    ""id"": ""238521f8-fad3-4b32-b7fb-23aee0b1b555"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Space"",
                    ""type"": ""Button"",
                    ""id"": ""7e1fb127-2f7e-4f06-b125-22eaeb3369da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1db6c4c8-97f6-47c0-86ca-3be759a805cc"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ArrowKeys"",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1455ff3b-401d-47ca-9d1e-0d853d736625"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ArrowKeys"",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""789faea3-531f-485d-9cd4-49d85d50ff48"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ArrowKeys"",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b56bdfa0-83db-4505-847d-e06590d2f3f7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ArrowKeys"",
                    ""action"": ""Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""ArrowKeys"",
            ""bindingGroup"": ""ArrowKeys"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Keyboard
        m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
        m_Keyboard_Up = m_Keyboard.FindAction("Up", throwIfNotFound: true);
        m_Keyboard_Down = m_Keyboard.FindAction("Down", throwIfNotFound: true);
        m_Keyboard_Enter = m_Keyboard.FindAction("Enter", throwIfNotFound: true);
        m_Keyboard_Space = m_Keyboard.FindAction("Space", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Keyboard
    private readonly InputActionMap m_Keyboard;
    private IKeyboardActions m_KeyboardActionsCallbackInterface;
    private readonly InputAction m_Keyboard_Up;
    private readonly InputAction m_Keyboard_Down;
    private readonly InputAction m_Keyboard_Enter;
    private readonly InputAction m_Keyboard_Space;
    public struct KeyboardActions
    {
        private @UIControls m_Wrapper;
        public KeyboardActions(@UIControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_Keyboard_Up;
        public InputAction @Down => m_Wrapper.m_Keyboard_Down;
        public InputAction @Enter => m_Wrapper.m_Keyboard_Enter;
        public InputAction @Space => m_Wrapper.m_Keyboard_Space;
        public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
        public void SetCallbacks(IKeyboardActions instance)
        {
            if (m_Wrapper.m_KeyboardActionsCallbackInterface != null)
            {
                @Up.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnDown;
                @Enter.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnEnter;
                @Enter.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnEnter;
                @Enter.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnEnter;
                @Space.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnSpace;
                @Space.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnSpace;
                @Space.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnSpace;
            }
            m_Wrapper.m_KeyboardActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Enter.started += instance.OnEnter;
                @Enter.performed += instance.OnEnter;
                @Enter.canceled += instance.OnEnter;
                @Space.started += instance.OnSpace;
                @Space.performed += instance.OnSpace;
                @Space.canceled += instance.OnSpace;
            }
        }
    }
    public KeyboardActions @Keyboard => new KeyboardActions(this);
    private int m_ArrowKeysSchemeIndex = -1;
    public InputControlScheme ArrowKeysScheme
    {
        get
        {
            if (m_ArrowKeysSchemeIndex == -1) m_ArrowKeysSchemeIndex = asset.FindControlSchemeIndex("ArrowKeys");
            return asset.controlSchemes[m_ArrowKeysSchemeIndex];
        }
    }
    public interface IKeyboardActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnEnter(InputAction.CallbackContext context);
        void OnSpace(InputAction.CallbackContext context);
    }
}
